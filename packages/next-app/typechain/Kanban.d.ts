/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface KanbanInterface extends ethers.utils.Interface {
  functions: {
    "assignTaskToRaider(uint256,uint256)": FunctionFragment;
    "contractBalance()": FunctionFragment;
    "funder()": FunctionFragment;
    "payContract(uint256)": FunctionFragment;
    "pm()": FunctionFragment;
    "requestTask(uint256)": FunctionFragment;
    "setPM(address)": FunctionFragment;
    "submitTask(uint256,string,string)": FunctionFragment;
    "taskApproved(uint256)": FunctionFragment;
    "taskForReview(uint256)": FunctionFragment;
    "taskLog(uint256)": FunctionFragment;
    "taskReviewRevoked(uint256)": FunctionFragment;
    "viewRequests(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "assignTaskToRaider",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "funder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setPM", values: [string]): string;
  encodeFunctionData(
    functionFragment: "submitTask",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "taskApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "taskForReview",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "taskLog",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "taskReviewRevoked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewRequests",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "assignTaskToRaider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "funder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "submitTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "taskApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taskForReview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "taskLog", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "taskReviewRevoked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewRequests",
    data: BytesLike
  ): Result;

  events: {
    "assigned(uint256,address)": EventFragment;
    "contractPaid(address,uint256)": EventFragment;
    "taskCompleted(uint256,uint256)": EventFragment;
    "taskForReviewed(uint256)": EventFragment;
    "taskRequested(uint256,address,uint256)": EventFragment;
    "taskReviewRevoke(uint256)": EventFragment;
    "taskSubmitted(uint256,uint256,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "assigned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "contractPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "taskCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "taskForReviewed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "taskRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "taskReviewRevoke"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "taskSubmitted"): EventFragment;
}

export class Kanban extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: KanbanInterface;

  functions: {
    assignTaskToRaider(
      _taskid: BigNumberish,
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    funder(overrides?: CallOverrides): Promise<[string]>;

    payContract(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pm(overrides?: CallOverrides): Promise<[string]>;

    requestTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPM(
      _pm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitTask(
      _funds: BigNumberish,
      _title: string,
      _details: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    taskApproved(
      _taskid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    taskForReview(
      _taskid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    taskLog(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean, string, boolean, boolean] & {
        title: string;
        details: string;
        funds: BigNumber;
        assigned: boolean;
        raider: string;
        reviewed: boolean;
        closed: boolean;
      }
    >;

    taskReviewRevoked(
      _taskid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    viewRequests(
      _taskid: BigNumberish,
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;
  };

  assignTaskToRaider(
    _taskid: BigNumberish,
    _requestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractBalance(overrides?: CallOverrides): Promise<BigNumber>;

  funder(overrides?: CallOverrides): Promise<string>;

  payContract(
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pm(overrides?: CallOverrides): Promise<string>;

  requestTask(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPM(
    _pm: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitTask(
    _funds: BigNumberish,
    _title: string,
    _details: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  taskApproved(
    _taskid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  taskForReview(
    _taskid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  taskLog(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, boolean, string, boolean, boolean] & {
      title: string;
      details: string;
      funds: BigNumber;
      assigned: boolean;
      raider: string;
      reviewed: boolean;
      closed: boolean;
    }
  >;

  taskReviewRevoked(
    _taskid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  viewRequests(
    _taskid: BigNumberish,
    _requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  callStatic: {
    assignTaskToRaider(
      _taskid: BigNumberish,
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    contractBalance(overrides?: CallOverrides): Promise<BigNumber>;

    funder(overrides?: CallOverrides): Promise<string>;

    payContract(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    pm(overrides?: CallOverrides): Promise<string>;

    requestTask(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setPM(_pm: string, overrides?: CallOverrides): Promise<void>;

    submitTask(
      _funds: BigNumberish,
      _title: string,
      _details: string,
      overrides?: CallOverrides
    ): Promise<void>;

    taskApproved(
      _taskid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    taskForReview(
      _taskid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    taskLog(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean, string, boolean, boolean] & {
        title: string;
        details: string;
        funds: BigNumber;
        assigned: boolean;
        raider: string;
        reviewed: boolean;
        closed: boolean;
      }
    >;

    taskReviewRevoked(
      _taskid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    viewRequests(
      _taskid: BigNumberish,
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;
  };

  filters: {
    assigned(
      task_id?: null,
      raiderApproved?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { task_id: BigNumber; raiderApproved: string }
    >;

    contractPaid(
      funder?: null,
      fundAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { funder: string; fundAmount: BigNumber }
    >;

    taskCompleted(
      task_id?: null,
      fundReleased?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { task_id: BigNumber; fundReleased: BigNumber }
    >;

    taskForReviewed(
      task_id?: null
    ): TypedEventFilter<[BigNumber], { task_id: BigNumber }>;

    taskRequested(
      task_id?: null,
      raider?: null,
      requestId?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { task_id: BigNumber; raider: string; requestId: BigNumber }
    >;

    taskReviewRevoke(
      task_id?: null
    ): TypedEventFilter<[BigNumber], { task_id: BigNumber }>;

    taskSubmitted(
      task_id?: null,
      funds?: null,
      title?: null,
      detail?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string],
      { task_id: BigNumber; funds: BigNumber; title: string; detail: string }
    >;
  };

  estimateGas: {
    assignTaskToRaider(
      _taskid: BigNumberish,
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractBalance(overrides?: CallOverrides): Promise<BigNumber>;

    funder(overrides?: CallOverrides): Promise<BigNumber>;

    payContract(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pm(overrides?: CallOverrides): Promise<BigNumber>;

    requestTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPM(
      _pm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitTask(
      _funds: BigNumberish,
      _title: string,
      _details: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    taskApproved(
      _taskid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    taskForReview(
      _taskid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    taskLog(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    taskReviewRevoked(
      _taskid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    viewRequests(
      _taskid: BigNumberish,
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assignTaskToRaider(
      _taskid: BigNumberish,
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    funder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payContract(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPM(
      _pm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitTask(
      _funds: BigNumberish,
      _title: string,
      _details: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    taskApproved(
      _taskid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    taskForReview(
      _taskid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    taskLog(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    taskReviewRevoked(
      _taskid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    viewRequests(
      _taskid: BigNumberish,
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
