/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface KanbanFactoryInterface extends ethers.utils.Interface {
  functions: {
    "createKanban(string,string,address)": FunctionFragment;
    "kanbanInfo(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createKanban",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "kanbanInfo",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createKanban",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kanbanInfo", data: BytesLike): Result;

  events: {
    "kanbanCreated(uint256,address,address,address,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "kanbanCreated"): EventFragment;
}

export class KanbanFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: KanbanFactoryInterface;

  functions: {
    createKanban(
      _title: string,
      _description: string,
      _pm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    kanbanInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        instance: string;
        title: string;
        description: string;
      }
    >;
  };

  createKanban(
    _title: string,
    _description: string,
    _pm: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  kanbanInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      instance: string;
      title: string;
      description: string;
    }
  >;

  callStatic: {
    createKanban(
      _title: string,
      _description: string,
      _pm: string,
      overrides?: CallOverrides
    ): Promise<void>;

    kanbanInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        instance: string;
        title: string;
        description: string;
      }
    >;
  };

  filters: {
    kanbanCreated(
      id?: null,
      creator?: null,
      instance?: null,
      pm?: null,
      title?: null,
      description?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, string, string],
      {
        id: BigNumber;
        creator: string;
        instance: string;
        pm: string;
        title: string;
        description: string;
      }
    >;
  };

  estimateGas: {
    createKanban(
      _title: string,
      _description: string,
      _pm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    kanbanInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createKanban(
      _title: string,
      _description: string,
      _pm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    kanbanInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
